#!/usr/bin/env python3
"""
Sistema de Pr√©-processamento Inteligente com CrewAI
Otimiza descri√ß√µes de produtos para melhor descoberta de pre√ßos.
"""

import pandas as pd
import os
import logging
from datetime import datetime
from typing import List
from dataclasses import dataclass
from dotenv import load_dotenv

# CrewAI imports
from crewai import Agent, Task, Crew, Process

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class ItemResult:
    """Resultado do processamento de um item"""
    original: str
    optimized: str
    notes: str

class SmartPreprocessor:
    """Sistema inteligente de pr√©-processamento com CrewAI"""

    def __init__(self):
        """Inicializa o sistema"""
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            raise ValueError("OPENAI_API_KEY n√£o encontrada nas vari√°veis de ambiente")

        # Agente especialista em otimiza√ß√£o de produtos brasileiros
        self.optimizer_agent = Agent(
            role="Especialista em E-commerce Brasileiro",
            goal="Otimizar descri√ß√µes de produtos para busca em e-commerces brasileiros",
            backstory="""Voc√™ √© um especialista em terminologia de e-commerce brasileiro.
            Sua miss√£o √© reescrever descri√ß√µes de produtos para maximizar a precis√£o
            das buscas, mantendo o significado original e usando termos que consumidores
            brasileiros realmente pesquisam.""",
            verbose=False
        )

    def _read_excel(self, file_path: str) -> List[str]:
        """L√™ arquivo Excel e extrai itens"""
        df = pd.read_excel(file_path)

        # Encontra coluna de produtos
        possible_columns = ['Item', 'item', 'Produto', 'produto', 'Descri√ß√£o', 'descri√ß√£o']
        product_column = None

        for col in df.columns:
            if col in possible_columns or any(term in str(col).lower() for term in ['item', 'produto', 'descri']):
                product_column = col
                break

        if not product_column:
            product_column = df.columns[0]

        # Extrai e limpa itens
        items = []
        for _, row in df.iterrows():
            item = str(row[product_column]).strip()
            if item and item.lower() not in ['nan', 'none', '']:
                items.append(item)

        logger.info(f"üìä Extra√≠dos {len(items)} itens da coluna '{product_column}'")
        return items

    def _optimize_item(self, item: str) -> ItemResult:
        """Otimiza um item usando IA"""

        task = Task(
            description=f"""
            Otimize esta descri√ß√£o de produto para busca em e-commerce brasileiro:
            "{item}"

            Regras:
            1. Mantenha o significado original
            2. Use terminologia brasileira padr√£o
            3. Adicione contexto se necess√°rio (ex: "mouse" ‚Üí "mouse para computador")
            4. Padronize termos (ex: "micro ondas" ‚Üí "microondas")
            5. Remova detalhes desnecess√°rios de projeto
            6. M√°ximo 8 palavras

            Retorne apenas a descri√ß√£o otimizada, sem explica√ß√µes.
            """,
            agent=self.optimizer_agent,
            expected_output="Descri√ß√£o otimizada do produto"
        )

        crew = Crew(
            agents=[self.optimizer_agent],
            tasks=[task],
            process=Process.sequential,
            verbose=False
        )

        try:
            result = crew.kickoff()
            optimized = str(result).strip().strip('"\'')

            # Fallback: se a IA n√£o otimizou bem, usa regras b√°sicas
            if len(optimized) > 100 or not optimized:
                optimized = self._basic_optimization(item)
                notes = "Otimiza√ß√£o b√°sica aplicada"
            else:
                notes = "Otimizado por IA"

            return ItemResult(
                original=item,
                optimized=optimized,
                notes=notes
            )

        except Exception as e:
            logger.warning(f"Erro na otimiza√ß√£o IA para '{item}': {e}")
            return ItemResult(
                original=item,
                optimized=self._basic_optimization(item),
                notes="Otimiza√ß√£o b√°sica (erro na IA)"
            )

    def _basic_optimization(self, item: str) -> str:
        """Otimiza√ß√£o b√°sica sem IA"""
        import re

        optimized = item.strip()

        # Remove frases desnecess√°rias
        patterns = [
            r'\(conforme.*?\)', r'conforme projeto.*', r'definid[ao] pela.*',
            r'padr√£o.*', r'pintura eletrost√°tica', r'com fechadura individual'
        ]

        for pattern in patterns:
            optimized = re.sub(pattern, '', optimized, flags=re.IGNORECASE)

        # Limpa espa√ßos
        optimized = re.sub(r'\s+', ' ', optimized).strip(' -+,.')

        # Adiciona contexto b√°sico
        if optimized.lower() in ['mouse', 'teclado', 'monitor']:
            optimized += ' para computador'

        # Limita palavras
        words = optimized.split()
        if len(words) > 8:
            optimized = ' '.join(words[:8])

        return optimized

    def process_file(self, input_file: str, output_file: str) -> List[ItemResult]:
        """Processa arquivo Excel completo"""
        logger.info(f"ü§ñ Iniciando pr√©-processamento inteligente: {input_file}")

        # L√™ itens
        items = self._read_excel(input_file)

        # Processa cada item
        results = []
        for i, item in enumerate(items):
            logger.info(f"‚ú® [{i+1}/{len(items)}] Otimizando: {item[:40]}...")

            result = self._optimize_item(item)
            results.append(result)

            if result.optimized != result.original:
                logger.info(f"   ‚Üí {result.optimized}")

        # Salva resultados
        self._save_results(results, output_file)

        # Estat√≠sticas
        optimized_count = sum(1 for r in results if r.optimized != r.original)
        logger.info(f"\nüìä Processamento conclu√≠do:")
        logger.info(f"   Total: {len(results)} itens")
        logger.info(f"   Otimizados: {optimized_count} ({optimized_count/len(results)*100:.1f}%)")
        logger.info(f"   Arquivo salvo: {output_file}")

        return results

    def _save_results(self, results: List[ItemResult], output_file: str):
        """Salva resultados em Excel"""
        data = []
        for result in results:
            data.append({
                'Item_Original': result.original,
                'Item_Otimizado': result.optimized,
                'Notas': result.notes
            })

        df = pd.DataFrame(data)

        # Cria arquivo com m√∫ltiplas abas
        with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
            # Todos os resultados
            df.to_excel(writer, sheet_name='Resultados_Completos', index=False)

            # Apenas itens otimizados (para descoberta de pre√ßos)
            optimized_df = df[['Item_Otimizado']].copy()
            optimized_df.rename(columns={'Item_Otimizado': 'Item'}, inplace=True)
            optimized_df.to_excel(writer, sheet_name='Itens_Otimizados', index=False)

def main():
    """Fun√ß√£o principal"""
    INPUT_FILE = os.getenv('INPUT_FILE', 'lista.xlsx')
    OUTPUT_FILE = f"Itens_Otimizados_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"

    if not os.path.exists(INPUT_FILE):
        logger.error(f"‚ùå Arquivo n√£o encontrado: {INPUT_FILE}")
        return

    try:
        processor = SmartPreprocessor()
        processor.process_file(INPUT_FILE, OUTPUT_FILE)
        logger.info("‚úÖ Pr√©-processamento conclu√≠do!")

    except Exception as e:
        logger.error(f"‚ùå Erro no processamento: {e}")

if __name__ == "__main__":
    main()

